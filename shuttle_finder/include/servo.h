// Generated by gencpp from file kondo/servo.msg
// DO NOT EDIT!


#ifndef KONDO_MESSAGE_SERVO_H
#define KONDO_MESSAGE_SERVO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kondo
{
template <class ContainerAllocator>
struct servo_
{
  typedef servo_<ContainerAllocator> Type;

  servo_()
    : stamp()
    , id(0)
    , angle(0.0)  {
    }
  servo_(const ContainerAllocator& _alloc)
    : stamp()
    , id(0)
    , angle(0.0)  {
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _id_type;
  _id_type id;

   typedef float _angle_type;
  _angle_type angle;




  typedef boost::shared_ptr< ::kondo::servo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kondo::servo_<ContainerAllocator> const> ConstPtr;

}; // struct servo_

typedef ::kondo::servo_<std::allocator<void> > servo;

typedef boost::shared_ptr< ::kondo::servo > servoPtr;
typedef boost::shared_ptr< ::kondo::servo const> servoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kondo::servo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kondo::servo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kondo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'kondo': ['/home/fortefibre/catkin_ws/src/nhk2015_back_ros/kondo/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kondo::servo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kondo::servo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kondo::servo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kondo::servo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kondo::servo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kondo::servo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kondo::servo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f47928ce8a78a5959182fcbd7d439162";
  }

  static const char* value(const ::kondo::servo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf47928ce8a78a595ULL;
  static const uint64_t static_value2 = 0x9182fcbd7d439162ULL;
};

template<class ContainerAllocator>
struct DataType< ::kondo::servo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kondo/servo";
  }

  static const char* value(const ::kondo::servo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kondo::servo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
uint8 id\n\
float32 angle\n\
";
  }

  static const char* value(const ::kondo::servo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kondo::servo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.id);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct servo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kondo::servo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kondo::servo_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KONDO_MESSAGE_SERVO_H
